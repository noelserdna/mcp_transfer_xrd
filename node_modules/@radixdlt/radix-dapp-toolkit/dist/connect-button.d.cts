import * as lit from 'lit';
import { LitElement, TemplateResult } from 'lit';
import * as lit_html from 'lit-html';
import { R as RadixButtonStatus, a as RadixButtonTheme, b as RequestItemTypes, c as RequestStatusTypes, d as RequestItem, A as Account, P as PersonaData } from './index-Cc3enzrB.cjs';

declare class RadixTabsMenu extends LitElement {
    active: 'sharing' | 'requests';
    private onClick;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-tabs-menu': RadixTabsMenu;
    }
}

declare class RadixPopover extends LitElement {
    connected: boolean;
    compact: boolean;
    isMobile: boolean;
    showCloseButton: boolean;
    closePopover(): void;
    svgBorder: string;
    private closeButton;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-popover': RadixPopover;
    }
}

declare class RadixButton extends LitElement {
    status: RadixButtonStatus;
    connected: boolean;
    fullWidth: boolean;
    theme: RadixButtonTheme;
    private onClick;
    private resizeObserver;
    connectedCallback(): void;
    disconnectedCallback(): void;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-button': RadixButton;
    }
}

declare class RadixCard extends LitElement {
    icon?: 'unchecked' | 'checked' | 'pending' | 'success' | 'error' | 'ignored';
    header: string;
    timestamp?: string;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-card': RadixCard;
    }
}

declare class RadixLink extends LitElement {
    displayText: string;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-link': RadixLink;
    }
}

declare class RadixAccount extends LitElement {
    address: string;
    label: string;
    appearanceId: number;
    private tooltipVisible;
    private setTimeoutInstance;
    private copiedTooltipTimeout;
    disconnectedCallback(): void;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-account': RadixAccount;
    }
}

declare class RadixRequestCard extends LitElement {
    type: RequestItemTypes;
    status: RequestStatusTypes;
    showCancel: boolean;
    showIgnore: boolean;
    timestamp: string;
    id: string;
    hash: string;
    render(): lit_html.TemplateResult<1>;
    private getRequestContentTemplate;
    private hasErrorIcon;
    private hasPendingIcon;
    private hasIgnoredIcon;
    private getIconFromStatus;
    private getStylingFromStatus;
    private onCancel;
    private onIgnore;
    private renderHash;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-request-card': RadixRequestCard;
    }
}

declare class RadixRequestCards extends LitElement {
    requestItems: RequestItem[];
    render(): lit_html.TemplateResult<1>[];
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-request-cards': RadixRequestCards;
    }
}

declare class RadixThemedButton extends LitElement {
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-themed-button': RadixThemedButton;
    }
}

declare class RadixNotConnectedPage extends LitElement {
    isMobile: boolean;
    status: RadixButtonStatus;
    isWalletLinked: boolean;
    isExtensionAvailable: boolean;
    requestItems: RequestItem[];
    render(): TemplateResult<1>;
    private renderRequestItemsTemplate;
    private connectNowButtonTemplate;
    private renderCeNotInstalledTemplate;
    private renderCeNotLinkedTemplate;
    private renderConnectTemplate;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-not-connected-page': RadixNotConnectedPage;
    }
}

declare class RadixPersonaCard extends LitElement {
    icon?: 'unchecked' | 'checked' | 'pending' | 'success' | 'error';
    persona: string;
    avatarUrl?: string;
    personaData: string[];
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-persona-card': RadixPersonaCard;
    }
}

declare class RadixSharingPage extends LitElement {
    avatarUrl: string;
    persona: string;
    dAppName: string;
    personaData: string[];
    accounts: Account[];
    private onUpdateData;
    private onLogout;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-sharing-page': RadixSharingPage;
    }
}

declare class RadixMask extends LitElement {
    isBranded: boolean;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-mask': RadixMask;
    }
}

declare class RadixRequestsPage extends LitElement {
    requestItems: RequestItem[];
    dAppName: string;
    loggedInTimestamp: string;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-requests-page': RadixRequestsPage;
    }
}

declare class ConnectButton extends LitElement {
    theme: RadixButtonTheme;
    dAppName: string;
    personaLabel: string;
    connected: boolean;
    status: RadixButtonStatus;
    loggedInTimestamp: string;
    showPopoverMenu: boolean;
    requestItems: RequestItem[];
    accounts: Account[];
    personaData: PersonaData[];
    isMobile: boolean;
    isWalletLinked: boolean;
    isExtensionAvailable: boolean;
    fullWidth: boolean;
    activeTab: 'sharing' | 'requests';
    mode: 'light' | 'dark';
    avatarUrl: string;
    compact: boolean;
    get hasSharedData(): boolean;
    pristine: boolean;
    initialBodyOverflow: string;
    windowClickEventHandler: (event: MouseEvent) => void;
    attributeChangedCallback(name: string, _old: string | null, value: string | null): void;
    private readonly fontGoogleApiHref;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    private injectFontCSS;
    private shouldSkipFontInjection;
    private togglePopoverMenu;
    private toggleBodyOverflow;
    private connectButtonTemplate;
    private connectTemplate;
    private renderSharingTemplate;
    private renderRequestItemsTemplate;
    private get showPopoverCloseButton();
    private popoverTemplate;
    private renderPopoverContentTemplate;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-connect-button': ConnectButton;
    }
}

declare class RadixWalletConnectorCard extends LitElement {
    header: string;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-wallet-connector-card': RadixWalletConnectorCard;
    }
}

declare class RadixWalletConnectorInfo extends LitElement {
    header: string;
    subheader: string;
    isError: boolean;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-wallet-connector-info': RadixWalletConnectorInfo;
    }
}

declare class RadixLoadingSpinner extends LitElement {
    size: number;
    weight: number;
    color: string;
    static styles: lit.CSSResult[];
    render(): lit_html.TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-loading-spinner': RadixLoadingSpinner;
    }
}

declare class RadixRcfmPage extends LitElement {
    header: string;
    subheader: string;
    isError: boolean;
    isLoading: boolean;
    isHidden: boolean;
    render(): lit_html.TemplateResult<1>;
    static styles: lit.CSSResult[];
}
declare global {
    interface HTMLElementTagNameMap {
        'radix-rcfm-page': RadixRcfmPage;
    }
}
