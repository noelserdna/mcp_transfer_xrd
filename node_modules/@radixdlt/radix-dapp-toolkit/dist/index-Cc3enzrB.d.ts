type Account = {
    label: string;
    address: string;
    appearanceId: number;
};
declare const RadixButtonStatus: {
    readonly pending: "pending";
    readonly success: "success";
    readonly error: "error";
    readonly default: "default";
};
type RadixButtonStatus = keyof typeof RadixButtonStatus;
declare const RadixButtonTheme: {
    readonly 'radix-blue': "radix-blue";
    readonly black: "black";
    readonly 'white-with-outline': "white-with-outline";
    readonly white: "white";
    readonly custom: "custom";
};
type RadixButtonTheme = keyof typeof RadixButtonTheme;
type PersonaData = {
    field: string;
    value: string;
};
declare const RequestStatus: {
    readonly fail: "fail";
    readonly ignored: "ignored";
    readonly pending: "pending";
    readonly success: "success";
    readonly timedOut: "timedOut";
    readonly cancelled: "cancelled";
    /**
     * Pending commit status is for preauthorization which was signed but not yet successfully committed to the network
     */
    readonly pendingCommit: "pendingCommit";
};
declare const RequestItemType: {
    readonly dataRequest: "dataRequest";
    readonly proofRequest: "proofRequest";
    readonly loginRequest: "loginRequest";
    readonly sendTransaction: "sendTransaction";
    readonly preAuthorizationRequest: "preAuthorizationRequest";
};
type RequestItemType = typeof RequestItemType;
type RequestItemTypes = keyof typeof RequestItemType;
type RequestStatusTypes = keyof typeof RequestStatus;
type RequestItem = {
    type: RequestItemTypes;
    status: RequestStatusTypes;
    interactionId: string;
    createdAt: number;
    showCancel?: boolean;
    transactionIntentHash?: string;
    error?: string;
    walletInteraction?: any;
    walletResponse?: any;
    sentToWallet?: boolean;
    isOneTimeRequest?: boolean;
    metadata?: Record<string, string | number | boolean>;
    walletData?: any;
};

export { type Account as A, type PersonaData as P, RadixButtonStatus as R, RadixButtonTheme as a, type RequestItemTypes as b, type RequestStatusTypes as c, type RequestItem as d };
