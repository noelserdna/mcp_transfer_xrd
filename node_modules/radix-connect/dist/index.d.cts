import { Hex } from '@noble/curves/abstract/utils';
import { z } from 'zod';

declare const concat: (...arrays: Uint8Array[]) => Uint8Array;

declare const fromHex: (hex: string) => Uint8Array;

declare const toHex: (value: Uint8Array) => string;

declare const blake2b: (input: Uint8Array) => string;

type Ed25519KeyPair = ReturnType<typeof createEd25519KeyPair>;
declare const createEd25519KeyPair: (privateKey?: Uint8Array) => {
    readonly ed25519: {
        readonly privateKey: Uint8Array;
        readonly publicKey: Uint8Array;
        readonly sign: (messageHash: Hex) => Uint8Array;
    };
    readonly x25519: {
        readonly privateKey: Uint8Array;
        readonly publicKey: Uint8Array;
        readonly calculateSharedSecret: (input: {
            publicKey: Hex;
            salt: Uint8Array;
            context: string;
            length: number;
        }) => Uint8Array;
    };
};

declare const decrypt: ({ data, encryptionKey, iv, }: {
    data: Uint8Array;
    encryptionKey: Uint8Array;
    iv: Uint8Array;
}) => Promise<Uint8Array>;
declare const encrypt: (data: Uint8Array, encryptionKey: Uint8Array, iv?: Uint8Array) => Promise<{
    combined: Uint8Array;
    iv: Uint8Array;
    cipherText: Uint8Array;
}>;

type SealedBoxProps = {
    iv: Uint8Array;
    authTag: Uint8Array;
    combined: Uint8Array;
    cipherText: Uint8Array;
    cipherTextAndAuthTag: Uint8Array;
};
declare const transformToSealbox: (bytes: Uint8Array, options?: {
    nonceLength?: number;
    authTagLength?: number;
}) => SealedBoxProps;

declare const secureRandom: (byteCount: number) => Uint8Array;

declare const RADIX_KEY_TYPE: {
    readonly TRANSACTION_SIGNING: 1460;
    readonly AUTHENTICATION_SIGNING: 1678;
    readonly MESSAGE_ENCRYPTION: 1391;
};
declare const RADIX_ENTITY_TYPE: {
    readonly ACCOUNT: 525;
    readonly IDENTITY: 618;
};
/**
 * Generates a BIP39 derivation path for Radix Ed25519 keys
 * @param networkId - The network ID (e.g. 1 for mainnet, 2 for stokenet)
 * @param keyType - The type of key (TRANSACTION_SIGNING, AUTHENTICATION_SIGNING, or MESSAGE_ENCRYPTION)
 * @param entityType - The type of entity (ACCOUNT or IDENTITY)
 * @param index - The index of the key (defaults to 0)
 * @returns A BIP39 derivation path string
 *
 * Example:
 * m/44'/1022'/1'/525'/1460'/0'
 */
declare const getRadixBIP39DerivationPath: ({ networkId, keyType, entityType, index, }: {
    networkId: number;
    keyType: keyof typeof RADIX_KEY_TYPE;
    entityType: keyof typeof RADIX_ENTITY_TYPE;
    index?: number;
}) => string;
declare const generateBIP39Mnemonic: (byteCount?: number) => string;
/**
 * Converts a BIP39 mnemonic phrase to a private key using a derivation path.
 * Optionally uses a password for seed generation.
 * @param mnemonic - The BIP39 mnemonic phrase (12 or 24 words).
 * @param password - Optional password for seed generation.
 * @param derivationPath - The BIP39 derivation path (e.g. m/44'/1022'/1'/525'/1460'/0').
 * @returns A promise that resolves to a hex-encoded private key.
 */
declare const mnemonicToPrivateKey: ({ mnemonic, password, derivationPath, }: {
    mnemonic: string;
    password?: string;
    derivationPath: string;
}) => Promise<string>;

declare const Account: z.ZodObject<{
    address: z.ZodString;
    label: z.ZodString;
    appearanceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    address: string;
    label: string;
    appearanceId: number;
}, {
    address: string;
    label: string;
    appearanceId: number;
}>;
type Account = z.infer<typeof Account>;
declare const Proof: z.ZodObject<{
    publicKey: z.ZodString;
    signature: z.ZodString;
    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
}, "strip", z.ZodTypeAny, {
    publicKey: string;
    signature: string;
    curve: "curve25519" | "secp256k1";
}, {
    publicKey: string;
    signature: string;
    curve: "curve25519" | "secp256k1";
}>;
type Proof = z.infer<typeof Proof>;
declare const AccountProof: z.ZodObject<{
    accountAddress: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    accountAddress: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}, {
    accountAddress: string;
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
}>;
type AccountProof = z.infer<typeof AccountProof>;
declare const PersonaProof: z.ZodObject<{
    identityAddress: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    identityAddress: string;
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    identityAddress: string;
}>;
type PersonaProof = z.infer<typeof PersonaProof>;
declare const ProofOfOwnershipRequestItem: z.ZodObject<{
    challenge: z.ZodString;
    identityAddress: z.ZodOptional<z.ZodString>;
    accountAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    identityAddress?: string | undefined;
    accountAddresses?: string[] | undefined;
}, {
    challenge: string;
    identityAddress?: string | undefined;
    accountAddresses?: string[] | undefined;
}>;
type ProofOfOwnershipRequestItem = z.infer<typeof ProofOfOwnershipRequestItem>;
declare const ProofOfOwnershipResponseItem: z.ZodObject<{
    challenge: z.ZodString;
    proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        accountAddress: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }>, z.ZodObject<{
        identityAddress: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        identityAddress: string;
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        identityAddress: string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    proofs: ({
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        identityAddress: string;
    })[];
}, {
    challenge: string;
    proofs: ({
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        identityAddress: string;
    })[];
}>;
declare const Persona: z.ZodObject<{
    identityAddress: z.ZodString;
    label: z.ZodString;
}, "strip", z.ZodTypeAny, {
    label: string;
    identityAddress: string;
}, {
    label: string;
    identityAddress: string;
}>;
type Persona = z.infer<typeof Persona>;
declare const personaDataFullNameVariant: {
    readonly western: "western";
    readonly eastern: "eastern";
};
declare const PersonaDataNameVariant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
type PersonaDataNameVariant = z.infer<typeof PersonaDataNameVariant>;
declare const PersonaDataName: z.ZodObject<{
    variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
    familyName: z.ZodString;
    nickname: z.ZodString;
    givenNames: z.ZodString;
}, "strip", z.ZodTypeAny, {
    variant: "western" | "eastern";
    familyName: string;
    nickname: string;
    givenNames: string;
}, {
    variant: "western" | "eastern";
    familyName: string;
    nickname: string;
    givenNames: string;
}>;
type PersonaDataName = z.infer<typeof PersonaDataName>;
declare const NumberOfValues: z.ZodObject<{
    quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
    quantity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}, {
    quantifier: "exactly" | "atLeast";
    quantity: number;
}>;
type NumberOfValues = z.infer<typeof NumberOfValues>;
declare const AccountsRequestItem: z.ZodObject<{
    challenge: z.ZodOptional<z.ZodString>;
    numberOfAccounts: z.ZodObject<{
        quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
        quantity: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }, {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    }>;
}, "strip", z.ZodTypeAny, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    challenge?: string | undefined;
}, {
    numberOfAccounts: {
        quantifier: "exactly" | "atLeast";
        quantity: number;
    };
    challenge?: string | undefined;
}>;
type AccountsRequestItem = z.infer<typeof AccountsRequestItem>;
declare const AccountsRequestResponseItem: z.ZodEffects<z.ZodObject<{
    accounts: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        label: z.ZodString;
        appearanceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        address: string;
        label: string;
        appearanceId: number;
    }, {
        address: string;
        label: string;
        appearanceId: number;
    }>, "many">;
    challenge: z.ZodOptional<z.ZodString>;
    proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
        accountAddress: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }, {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}>, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}, {
    accounts: {
        address: string;
        label: string;
        appearanceId: number;
    }[];
    challenge?: string | undefined;
    proofs?: {
        accountAddress: string;
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
    }[] | undefined;
}>;
type AccountsRequestResponseItem = z.infer<typeof AccountsRequestResponseItem>;
declare const PersonaDataRequestItem: z.ZodObject<{
    isRequestingName: z.ZodOptional<z.ZodBoolean>;
    numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
    numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    isRequestingName?: boolean | undefined;
    numberOfRequestedEmailAddresses?: number | undefined;
    numberOfRequestedPhoneNumbers?: number | undefined;
}, {
    isRequestingName?: boolean | undefined;
    numberOfRequestedEmailAddresses?: number | undefined;
    numberOfRequestedPhoneNumbers?: number | undefined;
}>;
type PersonaDataRequestItem = z.infer<typeof PersonaDataRequestItem>;
declare const PersonaDataRequestResponseItem: z.ZodObject<{
    name: z.ZodOptional<z.ZodObject<{
        variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
        familyName: z.ZodString;
        nickname: z.ZodString;
        givenNames: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }, {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    }>>;
    emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    } | undefined;
    emailAddresses?: string[] | undefined;
    phoneNumbers?: string[] | undefined;
}, {
    name?: {
        variant: "western" | "eastern";
        familyName: string;
        nickname: string;
        givenNames: string;
    } | undefined;
    emailAddresses?: string[] | undefined;
    phoneNumbers?: string[] | undefined;
}>;
type PersonaDataRequestResponseItem = z.infer<typeof PersonaDataRequestResponseItem>;
declare const ResetRequestItem: z.ZodObject<{
    accounts: z.ZodBoolean;
    personaData: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    accounts: boolean;
    personaData: boolean;
}, {
    accounts: boolean;
    personaData: boolean;
}>;
type ResetRequestItem = z.infer<typeof ResetRequestItem>;
declare const LoginRequestResponseItem: z.ZodEffects<z.ZodObject<{
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodOptional<z.ZodString>;
    proof: z.ZodOptional<z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
    challenge?: string | undefined;
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
    challenge?: string | undefined;
}>, {
    persona: {
        label: string;
        identityAddress: string;
    };
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
    challenge?: string | undefined;
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    proof?: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    } | undefined;
    challenge?: string | undefined;
}>;
type LoginRequestResponseItem = z.infer<typeof LoginRequestResponseItem>;
declare const WalletUnauthorizedRequestItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>;
type WalletUnauthorizedRequestItems = z.infer<typeof WalletUnauthorizedRequestItems>;
declare const AuthUsePersonaRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>;
type AuthUsePersonaRequestItem = z.infer<typeof AuthUsePersonaRequestItem>;
declare const AuthLoginWithoutChallengeRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>;
type AuthLoginWithoutChallengeRequestItem = z.infer<typeof AuthLoginWithoutChallengeRequestItem>;
declare const AuthLoginWithChallengeRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>;
type AuthLoginWithChallengeRequestItem = z.infer<typeof AuthLoginWithChallengeRequestItem>;
declare const AuthLoginRequestItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>]>;
declare const AuthRequestItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    identityAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    identityAddress: string;
    discriminator: "usePersona";
}, {
    identityAddress: string;
    discriminator: "usePersona";
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
}, "strip", z.ZodTypeAny, {
    discriminator: "loginWithoutChallenge";
}, {
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    challenge: z.ZodString;
}, "strip", z.ZodTypeAny, {
    challenge: string;
    discriminator: "loginWithChallenge";
}, {
    challenge: string;
    discriminator: "loginWithChallenge";
}>]>]>;
declare const WalletAuthorizedRequestItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        identityAddress: z.ZodOptional<z.ZodString>;
        accountAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>;
type WalletAuthorizedRequestItems = z.infer<typeof WalletAuthorizedRequestItems>;
declare const WalletRequestItems: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        identityAddress: z.ZodOptional<z.ZodString>;
        accountAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>]>;
type WalletRequestItems = z.infer<typeof WalletRequestItems>;
declare const SendTransactionItem: z.ZodObject<{
    transactionManifest: z.ZodString;
    version: z.ZodNumber;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    transactionManifest: string;
    version: number;
    message?: string | undefined;
    blobs?: string[] | undefined;
}, {
    transactionManifest: string;
    version: number;
    message?: string | undefined;
    blobs?: string[] | undefined;
}>;
type SendTransactionItem = z.infer<typeof SendTransactionItem>;
declare const WalletTransactionItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    }, {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    };
}>;
type WalletTransactionItems = z.infer<typeof WalletTransactionItems>;
declare const SendTransactionResponseItem: z.ZodObject<{
    transactionIntentHash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    transactionIntentHash: string;
}, {
    transactionIntentHash: string;
}>;
type SendTransactionResponseItem = z.infer<typeof SendTransactionResponseItem>;
declare const WalletTransactionResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}>;
declare const CancelRequest: z.ZodObject<{
    discriminator: z.ZodLiteral<"cancelRequest">;
}, "strip", z.ZodTypeAny, {
    discriminator: "cancelRequest";
}, {
    discriminator: "cancelRequest";
}>;
type CancelRequest = z.infer<typeof CancelRequest>;
declare const ExpireAtTime: z.ZodObject<{
    discriminator: z.ZodLiteral<"expireAtTime">;
    unixTimestampSeconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    discriminator: "expireAtTime";
    unixTimestampSeconds: number;
}, {
    discriminator: "expireAtTime";
    unixTimestampSeconds: number;
}>;
type ExpireAtTime = z.infer<typeof ExpireAtTime>;
declare const ExpireAfterDelay: z.ZodObject<{
    discriminator: z.ZodLiteral<"expireAfterDelay">;
    expireAfterSeconds: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    discriminator: "expireAfterDelay";
    expireAfterSeconds: number;
}, {
    discriminator: "expireAfterDelay";
    expireAfterSeconds: number;
}>;
type ExpireAfterDelay = z.infer<typeof ExpireAfterDelay>;
declare const SubintentRequestItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"subintent">;
    version: z.ZodNumber;
    manifestVersion: z.ZodNumber;
    subintentManifest: z.ZodString;
    blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    message: z.ZodOptional<z.ZodString>;
    expiration: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"expireAtTime">;
        unixTimestampSeconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        discriminator: "expireAtTime";
        unixTimestampSeconds: number;
    }, {
        discriminator: "expireAtTime";
        unixTimestampSeconds: number;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"expireAfterDelay">;
        expireAfterSeconds: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        discriminator: "expireAfterDelay";
        expireAfterSeconds: number;
    }, {
        discriminator: "expireAfterDelay";
        expireAfterSeconds: number;
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "subintent";
    version: number;
    manifestVersion: number;
    subintentManifest: string;
    expiration: {
        discriminator: "expireAtTime";
        unixTimestampSeconds: number;
    } | {
        discriminator: "expireAfterDelay";
        expireAfterSeconds: number;
    };
    message?: string | undefined;
    blobs?: string[] | undefined;
}, {
    discriminator: "subintent";
    version: number;
    manifestVersion: number;
    subintentManifest: string;
    expiration: {
        discriminator: "expireAtTime";
        unixTimestampSeconds: number;
    } | {
        discriminator: "expireAfterDelay";
        expireAfterSeconds: number;
    };
    message?: string | undefined;
    blobs?: string[] | undefined;
}>;
type SubintentRequestItem = z.infer<typeof SubintentRequestItem>;
declare const SubintentResponseItem: z.ZodObject<{
    expirationTimestamp: z.ZodNumber;
    subintentHash: z.ZodString;
    signedPartialTransaction: z.ZodString;
}, "strip", z.ZodTypeAny, {
    expirationTimestamp: number;
    subintentHash: string;
    signedPartialTransaction: string;
}, {
    expirationTimestamp: number;
    subintentHash: string;
    signedPartialTransaction: string;
}>;
type SubintentResponseItem = z.infer<typeof SubintentResponseItem>;
declare const WalletPreAuthorizationItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"preAuthorizationRequest">;
    request: z.ZodOptional<z.ZodObject<{
        discriminator: z.ZodLiteral<"subintent">;
        version: z.ZodNumber;
        manifestVersion: z.ZodNumber;
        subintentManifest: z.ZodString;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
        expiration: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"expireAtTime">;
            unixTimestampSeconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        }, {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"expireAfterDelay">;
            expireAfterSeconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        }, {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    }, {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "preAuthorizationRequest";
    request?: {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "preAuthorizationRequest";
    request?: {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    } | undefined;
}>;
type WalletPreAuthorizationItems = z.infer<typeof WalletPreAuthorizationItems>;
declare const WalletInteractionItems: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        identityAddress: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        identityAddress: string;
        discriminator: "usePersona";
    }, {
        identityAddress: string;
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "loginWithoutChallenge";
    }, {
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        challenge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }, {
        challenge: string;
        discriminator: "loginWithChallenge";
    }>]>]>;
    reset: z.ZodOptional<z.ZodObject<{
        accounts: z.ZodBoolean;
        personaData: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        accounts: boolean;
        personaData: boolean;
    }, {
        accounts: boolean;
        personaData: boolean;
    }>>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        identityAddress: z.ZodOptional<z.ZodString>;
        accountAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }, {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodOptional<z.ZodString>;
        numberOfAccounts: z.ZodObject<{
            quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
            quantity: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }, {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }, {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        isRequestingName: z.ZodOptional<z.ZodBoolean>;
        numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
        numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }, {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        identityAddress: string;
        discriminator: "usePersona";
    } | {
        discriminator: "loginWithoutChallenge";
    } | {
        challenge: string;
        discriminator: "loginWithChallenge";
    };
    oneTimeAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    oneTimePersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
    reset?: {
        accounts: boolean;
        personaData: boolean;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        identityAddress?: string | undefined;
        accountAddresses?: string[] | undefined;
    } | undefined;
    ongoingAccounts?: {
        numberOfAccounts: {
            quantifier: "exactly" | "atLeast";
            quantity: number;
        };
        challenge?: string | undefined;
    } | undefined;
    ongoingPersonaData?: {
        isRequestingName?: boolean | undefined;
        numberOfRequestedEmailAddresses?: number | undefined;
        numberOfRequestedPhoneNumbers?: number | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionManifest: z.ZodString;
        version: z.ZodNumber;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    }, {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionManifest: string;
        version: number;
        message?: string | undefined;
        blobs?: string[] | undefined;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"cancelRequest">;
}, "strip", z.ZodTypeAny, {
    discriminator: "cancelRequest";
}, {
    discriminator: "cancelRequest";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"preAuthorizationRequest">;
    request: z.ZodOptional<z.ZodObject<{
        discriminator: z.ZodLiteral<"subintent">;
        version: z.ZodNumber;
        manifestVersion: z.ZodNumber;
        subintentManifest: z.ZodString;
        blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        message: z.ZodOptional<z.ZodString>;
        expiration: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"expireAtTime">;
            unixTimestampSeconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        }, {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"expireAfterDelay">;
            expireAfterSeconds: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        }, {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    }, {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "preAuthorizationRequest";
    request?: {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "preAuthorizationRequest";
    request?: {
        discriminator: "subintent";
        version: number;
        manifestVersion: number;
        subintentManifest: string;
        expiration: {
            discriminator: "expireAtTime";
            unixTimestampSeconds: number;
        } | {
            discriminator: "expireAfterDelay";
            expireAfterSeconds: number;
        };
        message?: string | undefined;
        blobs?: string[] | undefined;
    } | undefined;
}>]>;
type WalletInteractionItems = z.infer<typeof WalletInteractionItems>;
declare const Metadata: z.ZodObject<{
    version: z.ZodLiteral<2>;
    networkId: z.ZodNumber;
    dAppDefinitionAddress: z.ZodString;
    origin: z.ZodString;
}, "strip", z.ZodTypeAny, {
    networkId: number;
    version: 2;
    dAppDefinitionAddress: string;
    origin: string;
}, {
    networkId: number;
    version: 2;
    dAppDefinitionAddress: string;
    origin: string;
}>;
type Metadata = z.infer<typeof Metadata>;
declare const WalletInteraction: z.ZodObject<{
    interactionId: z.ZodString;
    metadata: z.ZodObject<{
        version: z.ZodLiteral<2>;
        networkId: z.ZodNumber;
        dAppDefinitionAddress: z.ZodString;
        origin: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        networkId: number;
        version: 2;
        dAppDefinitionAddress: string;
        origin: string;
    }, {
        networkId: number;
        version: 2;
        dAppDefinitionAddress: string;
        origin: string;
    }>;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            identityAddress: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            identityAddress: string;
            discriminator: "usePersona";
        }, {
            identityAddress: string;
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        }, "strip", z.ZodTypeAny, {
            discriminator: "loginWithoutChallenge";
        }, {
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            challenge: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            discriminator: "loginWithChallenge";
        }, {
            challenge: string;
            discriminator: "loginWithChallenge";
        }>]>]>;
        reset: z.ZodOptional<z.ZodObject<{
            accounts: z.ZodBoolean;
            personaData: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            accounts: boolean;
            personaData: boolean;
        }, {
            accounts: boolean;
            personaData: boolean;
        }>>;
        proofOfOwnership: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodString;
            identityAddress: z.ZodOptional<z.ZodString>;
            accountAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        }, {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        }>>;
        oneTimeAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodOptional<z.ZodString>;
            numberOfAccounts: z.ZodObject<{
                quantifier: z.ZodUnion<[z.ZodLiteral<"exactly">, z.ZodLiteral<"atLeast">]>;
                quantity: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }, {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }, {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            isRequestingName: z.ZodOptional<z.ZodBoolean>;
            numberOfRequestedEmailAddresses: z.ZodOptional<z.ZodNumber>;
            numberOfRequestedPhoneNumbers: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }, {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionManifest: z.ZodString;
            version: z.ZodNumber;
            blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            message: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        }, {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"cancelRequest">;
    }, "strip", z.ZodTypeAny, {
        discriminator: "cancelRequest";
    }, {
        discriminator: "cancelRequest";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"preAuthorizationRequest">;
        request: z.ZodOptional<z.ZodObject<{
            discriminator: z.ZodLiteral<"subintent">;
            version: z.ZodNumber;
            manifestVersion: z.ZodNumber;
            subintentManifest: z.ZodString;
            blobs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            message: z.ZodOptional<z.ZodString>;
            expiration: z.ZodUnion<[z.ZodObject<{
                discriminator: z.ZodLiteral<"expireAtTime">;
                unixTimestampSeconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            }, {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            }>, z.ZodObject<{
                discriminator: z.ZodLiteral<"expireAfterDelay">;
                expireAfterSeconds: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            }, {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        }, {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "preAuthorizationRequest";
        request?: {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "preAuthorizationRequest";
        request?: {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        } | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    interactionId: string;
    metadata: {
        networkId: number;
        version: 2;
        dAppDefinitionAddress: string;
        origin: string;
    };
    items: {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    } | {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        };
    } | {
        discriminator: "cancelRequest";
    } | {
        discriminator: "preAuthorizationRequest";
        request?: {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        } | undefined;
    };
}, {
    interactionId: string;
    metadata: {
        networkId: number;
        version: 2;
        dAppDefinitionAddress: string;
        origin: string;
    };
    items: {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            identityAddress: string;
            discriminator: "usePersona";
        } | {
            discriminator: "loginWithoutChallenge";
        } | {
            challenge: string;
            discriminator: "loginWithChallenge";
        };
        oneTimeAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        oneTimePersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
        reset?: {
            accounts: boolean;
            personaData: boolean;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            identityAddress?: string | undefined;
            accountAddresses?: string[] | undefined;
        } | undefined;
        ongoingAccounts?: {
            numberOfAccounts: {
                quantifier: "exactly" | "atLeast";
                quantity: number;
            };
            challenge?: string | undefined;
        } | undefined;
        ongoingPersonaData?: {
            isRequestingName?: boolean | undefined;
            numberOfRequestedEmailAddresses?: number | undefined;
            numberOfRequestedPhoneNumbers?: number | undefined;
        } | undefined;
    } | {
        discriminator: "transaction";
        send: {
            transactionManifest: string;
            version: number;
            message?: string | undefined;
            blobs?: string[] | undefined;
        };
    } | {
        discriminator: "cancelRequest";
    } | {
        discriminator: "preAuthorizationRequest";
        request?: {
            discriminator: "subintent";
            version: number;
            manifestVersion: number;
            subintentManifest: string;
            expiration: {
                discriminator: "expireAtTime";
                unixTimestampSeconds: number;
            } | {
                discriminator: "expireAfterDelay";
                expireAfterSeconds: number;
            };
            message?: string | undefined;
            blobs?: string[] | undefined;
        } | undefined;
    };
}>;
type WalletInteraction = z.infer<typeof WalletInteraction>;
declare const WalletUnauthorizedRequestResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>;
declare const AuthLoginWithoutChallengeRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>;
type AuthLoginWithoutChallengeRequestResponseItem = z.infer<typeof AuthLoginWithoutChallengeRequestResponseItem>;
declare const AuthLoginWithChallengeRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>;
type AuthLoginWithChallengeRequestResponseItem = z.infer<typeof AuthLoginWithChallengeRequestResponseItem>;
declare const WalletPreAuthorizationResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"preAuthorizationResponse">;
    response: z.ZodOptional<z.ZodObject<{
        expirationTimestamp: z.ZodNumber;
        subintentHash: z.ZodString;
        signedPartialTransaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    }, {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "preAuthorizationResponse";
    response?: {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    } | undefined;
}, {
    discriminator: "preAuthorizationResponse";
    response?: {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    } | undefined;
}>;
declare const AuthLoginRequestResponseItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>]>;
declare const AuthUsePersonaRequestResponseItem: z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}>;
declare const AuthRequestResponseItem: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"usePersona">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "usePersona";
}>, z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithoutChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
}, "strip", z.ZodTypeAny, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}, {
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithoutChallenge";
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"loginWithChallenge">;
    persona: z.ZodObject<{
        identityAddress: z.ZodString;
        label: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        label: string;
        identityAddress: string;
    }, {
        label: string;
        identityAddress: string;
    }>;
    challenge: z.ZodString;
    proof: z.ZodObject<{
        publicKey: z.ZodString;
        signature: z.ZodString;
        curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
    }, "strip", z.ZodTypeAny, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }, {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    }>;
}, "strip", z.ZodTypeAny, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}, {
    proof: {
        publicKey: string;
        signature: string;
        curve: "curve25519" | "secp256k1";
    };
    challenge: string;
    persona: {
        label: string;
        identityAddress: string;
    };
    discriminator: "loginWithChallenge";
}>]>]>;
declare const WalletAuthorizedRequestResponseItems: z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, z.ZodObject<{
            identityAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>;
declare const WalletRequestResponseItems: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, z.ZodObject<{
            identityAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>]>;
declare const WalletInteractionResponseItems: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"unauthorizedRequest">;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "unauthorizedRequest";
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"authorizedRequest">;
    auth: z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"usePersona">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    }>, z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithoutChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }, {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"loginWithChallenge">;
        persona: z.ZodObject<{
            identityAddress: z.ZodString;
            label: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            label: string;
            identityAddress: string;
        }, {
            label: string;
            identityAddress: string;
        }>;
        challenge: z.ZodString;
        proof: z.ZodObject<{
            publicKey: z.ZodString;
            signature: z.ZodString;
            curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
        }, "strip", z.ZodTypeAny, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }, {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        }>;
    }, "strip", z.ZodTypeAny, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }, {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    }>]>]>;
    proofOfOwnership: z.ZodOptional<z.ZodObject<{
        challenge: z.ZodString;
        proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, z.ZodObject<{
            identityAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        }>]>, "many">;
    }, "strip", z.ZodTypeAny, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }, {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    }>>;
    oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
        accounts: z.ZodArray<z.ZodObject<{
            address: z.ZodString;
            label: z.ZodString;
            appearanceId: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            address: string;
            label: string;
            appearanceId: number;
        }, {
            address: string;
            label: string;
            appearanceId: number;
        }>, "many">;
        challenge: z.ZodOptional<z.ZodString>;
        proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
            accountAddress: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }, {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }, {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    }>>;
    oneTimePersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
    ongoingPersonaData: z.ZodOptional<z.ZodObject<{
        name: z.ZodOptional<z.ZodObject<{
            variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
            familyName: z.ZodString;
            nickname: z.ZodString;
            givenNames: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }, {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        }>>;
        emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }, {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}, {
    discriminator: "authorizedRequest";
    auth: {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithoutChallenge";
    } | {
        proof: {
            publicKey: string;
            signature: string;
            curve: "curve25519" | "secp256k1";
        };
        challenge: string;
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "loginWithChallenge";
    } | {
        persona: {
            label: string;
            identityAddress: string;
        };
        discriminator: "usePersona";
    };
    oneTimeAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    oneTimePersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
    proofOfOwnership?: {
        challenge: string;
        proofs: ({
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            identityAddress: string;
        })[];
    } | undefined;
    ongoingAccounts?: {
        accounts: {
            address: string;
            label: string;
            appearanceId: number;
        }[];
        challenge?: string | undefined;
        proofs?: {
            accountAddress: string;
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
        }[] | undefined;
    } | undefined;
    ongoingPersonaData?: {
        name?: {
            variant: "western" | "eastern";
            familyName: string;
            nickname: string;
            givenNames: string;
        } | undefined;
        emailAddresses?: string[] | undefined;
        phoneNumbers?: string[] | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    discriminator: z.ZodLiteral<"transaction">;
    send: z.ZodObject<{
        transactionIntentHash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        transactionIntentHash: string;
    }, {
        transactionIntentHash: string;
    }>;
}, "strip", z.ZodTypeAny, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}, {
    discriminator: "transaction";
    send: {
        transactionIntentHash: string;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"preAuthorizationResponse">;
    response: z.ZodOptional<z.ZodObject<{
        expirationTimestamp: z.ZodNumber;
        subintentHash: z.ZodString;
        signedPartialTransaction: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    }, {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    discriminator: "preAuthorizationResponse";
    response?: {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    } | undefined;
}, {
    discriminator: "preAuthorizationResponse";
    response?: {
        expirationTimestamp: number;
        subintentHash: string;
        signedPartialTransaction: string;
    } | undefined;
}>]>;
declare const WalletInteractionSuccessResponse: z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }>]>]>;
        proofOfOwnership: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodString;
            proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, z.ZodObject<{
                identityAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            }, {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        }, {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        }>>;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"preAuthorizationResponse">;
        response: z.ZodOptional<z.ZodObject<{
            expirationTimestamp: z.ZodNumber;
            subintentHash: z.ZodString;
            signedPartialTransaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        }, {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    }, {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}>;
declare const WalletInteractionFailureResponse: z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    discriminator: "failure";
    interactionId: string;
    error: string;
    message?: string | undefined;
}, {
    discriminator: "failure";
    interactionId: string;
    error: string;
    message?: string | undefined;
}>;
declare const WalletInteractionResponse: z.ZodUnion<[z.ZodObject<{
    discriminator: z.ZodLiteral<"success">;
    interactionId: z.ZodString;
    items: z.ZodUnion<[z.ZodUnion<[z.ZodObject<{
        discriminator: z.ZodLiteral<"unauthorizedRequest">;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"authorizedRequest">;
        auth: z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"usePersona">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        }>, z.ZodUnion<[z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithoutChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
        }, "strip", z.ZodTypeAny, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }, {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        }>, z.ZodObject<{
            discriminator: z.ZodLiteral<"loginWithChallenge">;
            persona: z.ZodObject<{
                identityAddress: z.ZodString;
                label: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                label: string;
                identityAddress: string;
            }, {
                label: string;
                identityAddress: string;
            }>;
            challenge: z.ZodString;
            proof: z.ZodObject<{
                publicKey: z.ZodString;
                signature: z.ZodString;
                curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
            }, "strip", z.ZodTypeAny, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }, {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            }>;
        }, "strip", z.ZodTypeAny, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }, {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        }>]>]>;
        proofOfOwnership: z.ZodOptional<z.ZodObject<{
            challenge: z.ZodString;
            proofs: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, z.ZodObject<{
                identityAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            }, {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        }, {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        }>>;
        oneTimeAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        ongoingAccounts: z.ZodOptional<z.ZodEffects<z.ZodObject<{
            accounts: z.ZodArray<z.ZodObject<{
                address: z.ZodString;
                label: z.ZodString;
                appearanceId: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                address: string;
                label: string;
                appearanceId: number;
            }, {
                address: string;
                label: string;
                appearanceId: number;
            }>, "many">;
            challenge: z.ZodOptional<z.ZodString>;
            proofs: z.ZodOptional<z.ZodArray<z.ZodObject<{
                accountAddress: z.ZodString;
                proof: z.ZodObject<{
                    publicKey: z.ZodString;
                    signature: z.ZodString;
                    curve: z.ZodUnion<[z.ZodLiteral<"curve25519">, z.ZodLiteral<"secp256k1">]>;
                }, "strip", z.ZodTypeAny, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }, {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                }>;
            }, "strip", z.ZodTypeAny, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }, {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }, {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        }>>;
        oneTimePersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
        ongoingPersonaData: z.ZodOptional<z.ZodObject<{
            name: z.ZodOptional<z.ZodObject<{
                variant: z.ZodUnion<[z.ZodLiteral<"eastern">, z.ZodLiteral<"western">]>;
                familyName: z.ZodString;
                nickname: z.ZodString;
                givenNames: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }, {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            }>>;
            emailAddresses: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            phoneNumbers: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }, {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }, {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    }>]>, z.ZodObject<{
        discriminator: z.ZodLiteral<"transaction">;
        send: z.ZodObject<{
            transactionIntentHash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            transactionIntentHash: string;
        }, {
            transactionIntentHash: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }, {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    }>, z.ZodObject<{
        discriminator: z.ZodLiteral<"preAuthorizationResponse">;
        response: z.ZodOptional<z.ZodObject<{
            expirationTimestamp: z.ZodNumber;
            subintentHash: z.ZodString;
            signedPartialTransaction: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        }, {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    }, {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}, {
    discriminator: "success";
    interactionId: string;
    items: {
        discriminator: "transaction";
        send: {
            transactionIntentHash: string;
        };
    } | {
        discriminator: "unauthorizedRequest";
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    } | {
        discriminator: "preAuthorizationResponse";
        response?: {
            expirationTimestamp: number;
            subintentHash: string;
            signedPartialTransaction: string;
        } | undefined;
    } | {
        discriminator: "authorizedRequest";
        auth: {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithoutChallenge";
        } | {
            proof: {
                publicKey: string;
                signature: string;
                curve: "curve25519" | "secp256k1";
            };
            challenge: string;
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "loginWithChallenge";
        } | {
            persona: {
                label: string;
                identityAddress: string;
            };
            discriminator: "usePersona";
        };
        oneTimeAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        oneTimePersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
        proofOfOwnership?: {
            challenge: string;
            proofs: ({
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            } | {
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
                identityAddress: string;
            })[];
        } | undefined;
        ongoingAccounts?: {
            accounts: {
                address: string;
                label: string;
                appearanceId: number;
            }[];
            challenge?: string | undefined;
            proofs?: {
                accountAddress: string;
                proof: {
                    publicKey: string;
                    signature: string;
                    curve: "curve25519" | "secp256k1";
                };
            }[] | undefined;
        } | undefined;
        ongoingPersonaData?: {
            name?: {
                variant: "western" | "eastern";
                familyName: string;
                nickname: string;
                givenNames: string;
            } | undefined;
            emailAddresses?: string[] | undefined;
            phoneNumbers?: string[] | undefined;
        } | undefined;
    };
}>, z.ZodObject<{
    discriminator: z.ZodLiteral<"failure">;
    interactionId: z.ZodString;
    error: z.ZodString;
    message: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    discriminator: "failure";
    interactionId: string;
    error: string;
    message?: string | undefined;
}, {
    discriminator: "failure";
    interactionId: string;
    error: string;
    message?: string | undefined;
}>]>;
type WalletInteractionResponse = z.infer<typeof WalletInteractionResponse>;

declare const base64urlEncode: (value: Record<string, unknown>) => string;

declare const createMessageHash: ({ interactionId, dAppDefinitionAddress, origin, }: {
    interactionId: string;
    dAppDefinitionAddress: string;
    origin: string;
}) => string;

declare const decryptPayload: ({ encryptedData, keyPair, salt, publicKey, }: {
    encryptedData: string;
    keyPair: Ed25519KeyPair;
    salt: string;
    publicKey: string;
}) => Promise<WalletInteractionResponse>;

declare const produceSignature: (input: {
    interactionId: string;
    origin: string;
    dAppDefinitionAddress: string;
}, keyPair: Ed25519KeyPair) => string;

type RadixConnectTransport = {
    sendRequest: (walletInteraction: WalletInteraction) => Promise<WalletInteractionResponse>;
};

type RequestBody = {
    sessionId: string;
    request: string;
    signature: string;
    publicKey: string;
    identity: string;
    origin: string;
    dAppDefinitionAddress: string;
};
type RadixConnectRelayTransportCtorParams = {
    baseUrl?: string;
    walletUrl?: string;
    sessionId?: string;
    privateKey?: Uint8Array;
    handleRequest: (request: {
        deepLink: string;
        body: RequestBody;
        abortController: AbortController;
    }) => Promise<void>;
};
declare const createRadixConnectRelayTransport: (input: RadixConnectRelayTransportCtorParams) => RadixConnectTransport;

type RadixConnectRelayApiClient = ReturnType<typeof createRadixConnectRelayApiClient>;
type RadixConnectRelaySuccessResponse = {
    sessionId: string;
    publicKey: string;
    data: string;
};
type RadixConnectRelayErrorResponse = {
    sessionId: string;
    error: string;
};
type RadixConnectRelayResponse = RadixConnectRelaySuccessResponse | RadixConnectRelayErrorResponse;
declare const createRadixConnectRelayApiClient: (input: {
    baseUrl: string;
}) => {
    getResponses: (sessionId: string) => Promise<RadixConnectRelayResponse[]>;
};

declare const createRadixConnectClient: ({ transport, }: {
    transport: RadixConnectTransport;
}) => {
    sendRequest: (walletInteraction: WalletInteraction) => Promise<WalletInteractionResponse>;
};

declare const createRolaMessage: ({ dAppDefinitionAddress, origin, challenge, }: {
    dAppDefinitionAddress: string;
    origin: string;
    challenge: string;
}) => string;

export { Account, AccountProof, AccountsRequestItem, AccountsRequestResponseItem, AuthLoginRequestItem, AuthLoginRequestResponseItem, AuthLoginWithChallengeRequestItem, AuthLoginWithChallengeRequestResponseItem, AuthLoginWithoutChallengeRequestItem, AuthLoginWithoutChallengeRequestResponseItem, AuthRequestItem, AuthRequestResponseItem, AuthUsePersonaRequestItem, AuthUsePersonaRequestResponseItem, CancelRequest, type Ed25519KeyPair, ExpireAfterDelay, ExpireAtTime, LoginRequestResponseItem, Metadata, NumberOfValues, Persona, PersonaDataName, PersonaDataNameVariant, PersonaDataRequestItem, PersonaDataRequestResponseItem, PersonaProof, Proof, ProofOfOwnershipRequestItem, ProofOfOwnershipResponseItem, RADIX_ENTITY_TYPE, RADIX_KEY_TYPE, type RadixConnectRelayApiClient, type RadixConnectRelayErrorResponse, type RadixConnectRelayResponse, type RadixConnectRelaySuccessResponse, type RadixConnectRelayTransportCtorParams, type RadixConnectTransport, ResetRequestItem, type SealedBoxProps, SendTransactionItem, SendTransactionResponseItem, SubintentRequestItem, SubintentResponseItem, WalletAuthorizedRequestItems, WalletAuthorizedRequestResponseItems, WalletInteraction, WalletInteractionFailureResponse, WalletInteractionItems, WalletInteractionResponse, WalletInteractionResponseItems, WalletInteractionSuccessResponse, WalletPreAuthorizationItems, WalletPreAuthorizationResponseItems, WalletRequestItems, WalletRequestResponseItems, WalletTransactionItems, WalletTransactionResponseItems, WalletUnauthorizedRequestItems, WalletUnauthorizedRequestResponseItems, base64urlEncode, blake2b, concat, createEd25519KeyPair, createMessageHash, createRadixConnectClient, createRadixConnectRelayApiClient, createRadixConnectRelayTransport, createRolaMessage, decrypt, decryptPayload, encrypt, fromHex, generateBIP39Mnemonic, getRadixBIP39DerivationPath, mnemonicToPrivateKey, personaDataFullNameVariant, produceSignature, secureRandom, toHex, transformToSealbox };
