import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { createRadixConnectClient, createRadixConnectRelayTransport, } from 'radix-connect';
import { z } from 'zod';
// Importar helpers de verificaci√≥n (Fase 4: Integration)
import { AddressValidator } from './helpers/address-validator.js';
import { BalanceChecker } from './helpers/balance-checker.js';
import { RadixAPIHelper } from './helpers/radix-api.js';
import { DecimalUtils, ErrorType } from './types/radix-types.js';
// Importar helper de generaci√≥n QR (Nueva funcionalidad)
import { qrGenerator } from './helpers/qr-generator.js';
// Importar nueva funcionalidad QR local (Fase 1.3: QR PNG Local Generation)
import { localQRManager } from './helpers/local-qr-manager.js';
const server = new McpServer({
    name: "simple-mcp-server",
    version: "1.0.0",
}, {
    capabilities: {
        tools: {},
        prompts: {},
    },
});
// Create RadixConnect manager class
class RadixConnectManager {
    constructor() {
        const transport = createRadixConnectRelayTransport({
            handleRequest: async ({ deepLink }) => {
                if (this.deepLinkCallback) {
                    this.deepLinkCallback(deepLink);
                }
            },
        });
        this.client = createRadixConnectClient({ transport });
    }
    onDeepLink(callback) {
        this.deepLinkCallback = callback;
    }
    onResponse(callback) {
        this.responseCallback = callback;
    }
    async sendTransactionRequest(manifest, message) {
        try {
            const response = await this.client.sendRequest({
                interactionId: crypto.randomUUID(),
                metadata: {
                    version: 2,
                    networkId: 2,
                    dAppDefinitionAddress: 'account_tdx_2_128g70quz3ugxqrj94s7j0uc4xy8jeygs0vutjfamn30urnxn3s52ct',
                    origin: 'https://wellradix.pages.dev/',
                },
                items: {
                    discriminator: 'transaction',
                    send: {
                        transactionManifest: manifest,
                        version: 1,
                        message: message || 'Transaction request'
                    }
                }
            });
            if (this.responseCallback) {
                this.responseCallback(response);
            }
            return response;
        }
        catch (error) {
            console.error('Error sending transaction request:', error);
            throw error;
        }
    }
}
// Initialize RadixConnect manager
const radixManager = new RadixConnectManager();
// Initialize verification helpers (Fase 4: Integration)
const radixAPIHelper = new RadixAPIHelper();
const balanceChecker = new BalanceChecker(radixAPIHelper);
// Define Zod schema for XRD transaction parameters
const XrdTransactionSchema = {
    fromAddress: z.string().describe("Direcci√≥n de la billetera origen"),
    toAddress: z.string().describe("Direcci√≥n de la billetera destino"),
    amount: z.string().describe("Cantidad de XRD a transferir"),
    message: z.string().optional().describe("Mensaje opcional para la transacci√≥n")
};
server.tool("xrd_transaccion", "Genera un deep link para realizar una transacci√≥n de XRD en Stokenet con validaciones autom√°ticas", XrdTransactionSchema, async (params) => {
    try {
        // Debug logging
        console.error("DEBUG - Par√°metros recibidos:", JSON.stringify(params, null, 2));
        const { fromAddress, toAddress, amount, message } = params;
        // INTEGRACI√ìN FASE 4: Validaciones autom√°ticas usando helpers implementados
        console.error("DEBUG - Iniciando validaciones autom√°ticas...");
        // 1. Validar direcciones usando AddressValidator
        const fromAddressValidation = AddressValidator.validateAccountAddress(fromAddress);
        if (!fromAddressValidation.isValid) {
            return {
                content: [{
                        type: "text",
                        text: `‚ùå **Error en direcci√≥n de origen**\n\n${fromAddressValidation.errorMessage || 'Formato de direcci√≥n inv√°lido'}\n\nüí° **Sugerencia**: Aseg√∫rate de que la direcci√≥n de origen sea una direcci√≥n v√°lida de cuenta de Stokenet que comience con 'account_tdx_2_'.`
                    }]
            };
        }
        const toAddressValidation = AddressValidator.validateAccountAddress(toAddress);
        if (!toAddressValidation.isValid) {
            return {
                content: [{
                        type: "text",
                        text: `‚ùå **Error en direcci√≥n de destino**\n\n${toAddressValidation.errorMessage || 'Formato de direcci√≥n inv√°lido'}\n\nüí° **Sugerencia**: Aseg√∫rate de que la direcci√≥n de destino sea una direcci√≥n v√°lida de cuenta de Stokenet que comience con 'account_tdx_2_'.`
                    }]
            };
        }
        console.error("DEBUG - Direcciones validadas exitosamente");
        // 2. Verificar balance usando BalanceChecker
        const balanceCheck = await balanceChecker.checkXRDBalance(fromAddress, amount);
        if (!balanceCheck.isValid) {
            const errorDetails = balanceCheck.errorCode === ErrorType.INSUFFICIENT_BALANCE ?
                (balanceCheck.errorMessage || 'Balance insuficiente') :
                `‚ùå **Error verificando balance**\n\n${balanceCheck.errorMessage || 'Error desconocido verificando balance'}\n\nüí° **Sugerencia**: Verifica que la direcci√≥n de origen tenga suficientes XRD para completar la transacci√≥n.`;
            return {
                content: [{
                        type: "text",
                        text: errorDetails
                    }]
            };
        }
        console.error("DEBUG - Balance verificado exitosamente");
        // Los par√°metros ya est√°n validados por Zod + nuestros helpers adicionales
        // Generar manifiesto correcto de transacci√≥n XRD para Stokenet
        const resourceAddress = "resource_tdx_2_1tknxxxxxxxxxradxrdxxxxxxxxx009923554798xxxxxxxxxtfd2jc";
        const manifest = `
CALL_METHOD
    Address("${fromAddress}")
    "withdraw"
    Address("${resourceAddress}")
    Decimal("${amount}")
;
TAKE_FROM_WORKTOP
    Address("${resourceAddress}")
    Decimal("${amount}")
    Bucket("bucket1")
;
CALL_METHOD
    Address("${toAddress}")
    "try_deposit_or_abort"
    Bucket("bucket1")
    Enum<0u8>()
;`.trim();
        // Usar RadixConnect para generar el deep link
        const generatedDeepLink = await new Promise((resolve, reject) => {
            // Configurar callback para capturar el deep link
            radixManager.onDeepLink((deepLink) => {
                resolve(deepLink);
            });
            // Enviar la solicitud de transacci√≥n
            radixManager.sendTransactionRequest(manifest, message || `Transferencia de ${amount} XRD`)
                .catch(reject);
        });
        // INTEGRACI√ìN FASE 4: Respuesta enriquecida con informaci√≥n de validaci√≥n
        const responseText = `${generatedDeepLink}\n\n‚úÖ **Validaciones completadas exitosamente:**\n‚Ä¢ Direcci√≥n de origen v√°lida: ${fromAddress}\n‚Ä¢ Direcci√≥n de destino v√°lida: ${toAddress}\n‚Ä¢ Balance suficiente: ${DecimalUtils.formatXRD(balanceCheck.currentBalance || '0')} disponibles\n‚Ä¢ Cantidad a transferir: ${DecimalUtils.formatXRD(amount)}\n\nüì± **Instrucciones:**\n1. Toca el enlace anterior para abrir Radix Wallet\n2. Revisa los detalles de la transacci√≥n\n3. Firma y confirma la transferencia`;
        return {
            content: [
                {
                    type: "text",
                    text: responseText || generatedDeepLink,
                },
            ],
        };
    }
    catch (error) {
        // INTEGRACI√ìN FASE 4: Manejo de errores con fallback graceful
        console.error("DEBUG - Error en xrd_transaccion:", error);
        // Si el error viene de validaciones, usar mensaje estructurado
        if (error && typeof error === 'object' && 'type' in error) {
            const radixError = error;
            return {
                content: [{
                        type: "text",
                        text: `‚ö†Ô∏è **Error de validaci√≥n**\n\n${radixError.message || 'Error de validaci√≥n desconocido'}\n\nüí° **Recomendaci√≥n**: Verifica los datos e intenta nuevamente. Si el problema persiste, la transacci√≥n a√∫n puede procesarse sin validaci√≥n previa.`
                    }]
            };
        }
        // Fallback para errores no estructurados - no bloquear transacci√≥n
        return {
            content: [
                {
                    type: "text",
                    text: `‚ö†Ô∏è **Advertencia**: No se pudo completar la validaci√≥n autom√°tica, pero puedes continuar con la transacci√≥n.\n\n**Error**: ${error instanceof Error ? error.message : 'Error desconocido'}\n\nüí° **Recomendaci√≥n**: Verifica manualmente que tienes suficiente balance antes de confirmar la transacci√≥n en Radix Wallet.`,
                },
            ],
        };
    }
});
// Define Zod schema for QR generation parameters
const DeepLinkToQRSchema = {
    deeplink: z.string().describe("Deep link de Radix Wallet para convertir a c√≥digo QR"),
    formato: z.enum(['svg', 'png', 'both']).optional().describe("Formato de salida: svg, png o both (default: both)"),
    tama√±o: z.number().min(32).max(2048).optional().describe("Tama√±o en p√≠xeles para PNG (default: 256)")
};
// Define Zod schema for local QR PNG generation parameters
const DeepLinkToQRLocalSchema = {
    deeplink: z.string().describe("Deep link de Radix Wallet para convertir a c√≥digo QR PNG local"),
    tama√±o: z.number().min(128).max(2048).optional().describe("Tama√±o en p√≠xeles para PNG (default: 512, optimizado para escaneado m√≥vil)"),
    calidad: z.enum(['low', 'medium', 'high', 'max']).optional().describe("Calidad del QR para escaneado m√≥vil (default: high)"),
    directorio: z.string().optional().describe("Directorio personalizado para guardar archivo (default: qrimages)")
};
server.tool("deeplink_to_qr", "Convierte un deep link de Radix Wallet a c√≥digo QR en formato SVG y/o PNG", DeepLinkToQRSchema, async (params) => {
    try {
        console.error("DEBUG - Generando QR para:", JSON.stringify(params, null, 2));
        const { deeplink, formato = 'both', tama√±o = 256 } = params;
        // Usar el helper de generaci√≥n QR
        const result = await qrGenerator.generateQR({
            deeplink,
            formato,
            tama√±o
        });
        // Construir respuesta informativa
        const formatosStr = result.metadatos.formatos_generados.join(' y ');
        let responseText = `‚úÖ **C√≥digo QR generado exitosamente**\n\n`;
        responseText += `üì± **Deep Link Original:** ${result.metadatos.url_original}\n`;
        responseText += `üìä **Formatos generados:** ${formatosStr}\n`;
        responseText += `üìê **Tama√±o PNG:** ${result.metadatos.tama√±o_png}px\n`;
        responseText += `‚è∞ **Generado:** ${new Date(result.metadatos.timestamp).toLocaleString('es-ES')}\n\n`;
        if (result.svg) {
            responseText += `**üìÑ SVG Code:**\n\`\`\`svg\n${result.svg}\n\`\`\`\n\n`;
        }
        if (result.png_base64) {
            responseText += `**üñºÔ∏è PNG Base64:**\n\`\`\`\n${result.png_base64}\n\`\`\`\n\n`;
        }
        responseText += `üí° **Instrucciones de uso:**\n`;
        responseText += `‚Ä¢ **SVG**: Copia el c√≥digo SVG y √∫salo en aplicaciones web\n`;
        responseText += `‚Ä¢ **PNG Base64**: √ösalo como \`data:image/png;base64,<c√≥digo>\` en HTML\n`;
        responseText += `‚Ä¢ **Escaneo m√≥vil**: Ambos formatos son escaneables con cualquier lector QR\n`;
        responseText += `‚Ä¢ **Radix Wallet**: Al escanear, abrir√° directamente la transacci√≥n en Radix Wallet`;
        return {
            content: [
                {
                    type: "text",
                    text: responseText,
                },
            ],
        };
    }
    catch (error) {
        console.error("DEBUG - Error generando QR:", error);
        return {
            content: [
                {
                    type: "text",
                    text: `‚ùå **Error generando c√≥digo QR**\n\n${error instanceof Error ? error.message : 'Error desconocido'}\n\nüí° **Verificaciones:**\n‚Ä¢ Aseg√∫rate de que el deep link sea v√°lido\n‚Ä¢ El deep link debe ser de Radix Wallet (radixwallet:// o https://wallet.radixdlt.com/)\n‚Ä¢ El tama√±o para PNG debe estar entre 32 y 2048 p√≠xeles`,
                },
            ],
        };
    }
});
server.tool("deeplink_to_qr_local", "Genera un c√≥digo QR como archivo PNG local para deep links de Radix Wallet, compatible con Claude Desktop", DeepLinkToQRLocalSchema, async (params) => {
    try {
        console.error("DEBUG - Generando QR PNG local para:", JSON.stringify(params, null, 2));
        const { deeplink, tama√±o = 512, calidad = 'high', directorio } = params;
        // Validar par√°metros espec√≠ficos para generaci√≥n local
        if (tama√±o < 128 || tama√±o > 2048) {
            return {
                content: [{
                        type: "text",
                        text: `‚ùå **Error en tama√±o de QR**\n\nEl tama√±o debe estar entre 128 y 2048 p√≠xeles. Se recomiendan 512px o m√°s para mejor escaneado m√≥vil.\n\nüí° **Sugerencia**: Usa 512px (default) o 1024px para calidad √≥ptima con c√°maras m√≥viles.`
                    }]
            };
        }
        // Usar el LocalQRManager para generar archivo PNG local
        const startTime = performance.now();
        const result = await localQRManager.generateQRLocal(deeplink);
        const generationTime = Math.round(performance.now() - startTime);
        // Actualizar metadata con tiempo real
        result.metadatos.tiempo_generacion_ms = generationTime;
        // Construir respuesta informativa para Claude Desktop
        let responseText = `‚úÖ **Archivo QR PNG generado exitosamente**\n\n`;
        responseText += `üìÅ **Archivo creado**: \`${result.archivo_path}\`\n`;
        responseText += `üìù **Nombre**: ${result.nombre_archivo}\n`;
        responseText += `üìä **Tama√±o archivo**: ${(result.tama√±o_bytes / 1024).toFixed(1)} KB\n`;
        responseText += `üìê **Dimensiones**: ${result.metadatos.dimensiones.ancho}√ó${result.metadatos.dimensiones.alto}px\n`;
        responseText += `üîó **Hash √∫nico**: ${result.metadatos.hash_unico}\n`;
        responseText += `‚ö° **Tiempo generaci√≥n**: ${result.metadatos.tiempo_generacion_ms}ms\n`;
        responseText += `‚è∞ **Creado**: ${new Date(result.metadatos.timestamp).toLocaleString('es-ES')}\n\n`;
        responseText += `üéØ **¬øPor qu√© QR PNG local?**\n`;
        responseText += `‚Ä¢ **Compatible con Claude Desktop**: Este archivo PNG es renderizable como artefacto\n`;
        responseText += `‚Ä¢ **Calidad optimizada**: Tama√±o ${result.metadatos.dimensiones.ancho}px ideal para escaneado m√≥vil\n`;
        responseText += `‚Ä¢ **Almacenado localmente**: Archivo guardado en tu sistema para reutilizaci√≥n\n`;
        responseText += `‚Ä¢ **√önico y persistente**: Hash √∫nico evita duplicados, archivo reutilizable\n\n`;
        responseText += `üì± **Instrucciones de uso**:\n`;
        responseText += `1. **Escaneo directo**: Usa cualquier app de c√°mara o lector QR para escanear\n`;
        responseText += `2. **Radix Wallet**: Al escanear se abrir√° directamente la transacci√≥n\n`;
        responseText += `3. **Compartir**: Puedes enviar este archivo PNG a otros dispositivos\n`;
        responseText += `4. **Reutilizar**: El archivo queda guardado para futuros usos\n\n`;
        responseText += `üí° **Ventajas vs QR Base64**:\n`;
        responseText += `‚Ä¢ ‚úÖ Compatible con artefactos de Claude Desktop\n`;
        responseText += `‚Ä¢ ‚úÖ No pierde contexto durante renderizado\n`;
        responseText += `‚Ä¢ ‚úÖ Archivo f√≠sico reutilizable y compartible\n`;
        responseText += `‚Ä¢ ‚úÖ Mayor calidad para escaneado m√≥vil confiable\n`;
        responseText += `‚Ä¢ ‚úÖ Gesti√≥n autom√°tica de archivos duplicados\n\n`;
        responseText += `üìÇ **Gesti√≥n de archivos**: Los archivos se guardan en \`${result.metadatos.directorio}\` con limpieza autom√°tica de archivos antiguos (>7 d√≠as).`;
        return {
            content: [
                {
                    type: "text",
                    text: responseText,
                },
            ],
        };
    }
    catch (error) {
        console.error("DEBUG - Error generando QR PNG local:", error);
        // Manejo espec√≠fico de errores de LocalQRManager
        if (error && typeof error === 'object' && 'code' in error) {
            const localError = error;
            let errorMessage = `‚ùå **Error de generaci√≥n local**\n\n`;
            switch (localError.code) {
                case 'DIRECTORY_ERROR':
                    errorMessage += `**Problema con directorio**: ${localError.message}\n\n`;
                    errorMessage += `üí° **Soluciones**:\n`;
                    errorMessage += `‚Ä¢ Verifica permisos de escritura en el directorio del proyecto\n`;
                    errorMessage += `‚Ä¢ Aseg√∫rate de que hay espacio disponible en disco\n`;
                    errorMessage += `‚Ä¢ Intenta usar un directorio personalizado con el par√°metro \`directorio\``;
                    break;
                case 'FILE_ERROR':
                    errorMessage += `**Error escribiendo archivo**: ${localError.message}\n\n`;
                    errorMessage += `üí° **Soluciones**:\n`;
                    errorMessage += `‚Ä¢ Verifica que no hay archivos bloqueados en el directorio\n`;
                    errorMessage += `‚Ä¢ Aseg√∫rate de tener permisos de escritura\n`;
                    errorMessage += `‚Ä¢ Intenta con un nombre de archivo diferente`;
                    break;
                case 'GENERATION_ERROR':
                    errorMessage += `**Error en generaci√≥n QR**: ${localError.message}\n\n`;
                    errorMessage += `üí° **Verificaciones**:\n`;
                    errorMessage += `‚Ä¢ Confirma que el deep link sea v√°lido de Radix Wallet\n`;
                    errorMessage += `‚Ä¢ Verifica el formato: debe comenzar con \`radixwallet://\` o \`https://wallet.radixdlt.com/\`\n`;
                    errorMessage += `‚Ä¢ Intenta con un tama√±o menor (512px o 256px)`;
                    break;
                default:
                    errorMessage += `**Error desconocido**: ${localError.message}`;
            }
            return {
                content: [{
                        type: "text",
                        text: errorMessage
                    }]
            };
        }
        // Fallback para errores no estructurados
        return {
            content: [
                {
                    type: "text",
                    text: `‚ùå **Error generando QR PNG local**\n\n${error instanceof Error ? error.message : 'Error desconocido'}\n\nüí° **Alternativa**: Puedes usar la herramienta \`deeplink_to_qr\` para obtener QR en Base64, aunque no sea compatible con artefactos de Claude Desktop.\n\nüîß **Verificaciones**:\n‚Ä¢ Deep link v√°lido de Radix Wallet\n‚Ä¢ Permisos de escritura en directorio del proyecto\n‚Ä¢ Espacio disponible en disco\n‚Ä¢ Tama√±o entre 128-2048 p√≠xeles`,
                },
            ],
        };
    }
});
server.prompt("transferir_xrd", "Transferir XRD entre wallets con validaciones autom√°ticas", {
    fromAddress: z.string().describe("Direcci√≥n de la wallet origen (debe ser una direcci√≥n v√°lida de Stokenet que comience con 'account_tdx_2_')"),
    toAddress: z.string().describe("Direcci√≥n de la wallet destino (debe ser una direcci√≥n v√°lida de Stokenet que comience con 'account_tdx_2_')"),
    amount: z.string().describe("Cantidad de XRD a transferir (ejemplo: 10.5, 1, 0.1)"),
    message: z.string().optional().describe("Mensaje opcional para la transferencia")
}, async (args) => {
    const { fromAddress, toAddress, amount, message } = args;
    return {
        messages: [
            {
                role: "user",
                content: {
                    type: "text",
                    text: `# Transferir XRD en Stokenet con Validaciones Autom√°ticas

¬°Perfecto! Vamos a crear una transferencia sencilla de XRD entre wallets en la red Stokenet con verificaciones autom√°ticas de seguridad.

## Datos para la transferencia:

${fromAddress ? `‚úÖ **Wallet Origen**: ${fromAddress}` : '‚ùå **Wallet Origen**: *Requerido*'}
${toAddress ? `‚úÖ **Wallet Destino**: ${toAddress}` : '‚ùå **Wallet Destino**: *Requerido*'}  
${amount ? `‚úÖ **Cantidad**: ${amount} XRD` : '‚ùå **Cantidad**: *Requerido*'}
${message ? `üìù **Mensaje**: ${message}` : 'üìù **Mensaje**: Sin mensaje'}

## üõ°Ô∏è Validaciones Autom√°ticas Habilitadas:

Nuestro sistema ahora incluye verificaciones autom√°ticas para mayor seguridad:

- ‚úÖ **Validaci√≥n de Direcciones**: Verificamos que ambas direcciones sean v√°lidas para Stokenet
- ‚úÖ **Verificaci√≥n de Balance**: Comprobamos que tengas suficientes XRD antes de generar la transacci√≥n
- ‚úÖ **Detecci√≥n Temprana de Errores**: Identificamos problemas antes de abrir la wallet
- ‚úÖ **Mensajes Informativos**: Te mostramos el estado de tu balance y validaciones

## Instrucciones:

1. **Wallet Origen**: Proporciona la direcci√≥n de tu wallet desde la cual quieres enviar XRD
   - Formato: \`account_tdx_2_...\`
   - Ejemplo: \`account_tdx_2_1289zm062j788dwrjefqkfgfeea5tkkdnh8htqhdrzdvjkql4kxceql\`

2. **Wallet Destino**: Proporciona la direcci√≥n de la wallet que recibir√° los XRD  
   - Formato: \`account_tdx_2_...\`
   - Ejemplo: \`account_tdx_2_128evrrwfp8gj9240qq0m06ukhwaj2cmejluxxreanzjwq62hdkqlq\`

3. **Cantidad**: Especifica cu√°ntos XRD quieres transferir
   - Ejemplos: \`10\`, \`5.5\`, \`0.1\`

4. **Mensaje** (opcional): Agrega una nota descriptiva para la transferencia

## ¬øQu√© sucede despu√©s?

Una vez que proporciones todos los datos requeridos:

1. üîç **Validaciones autom√°ticas**: Verificaremos direcciones y balance
2. ‚úÖ **Confirmaci√≥n de estado**: Te mostraremos el resultado de las validaciones  
3. üì± **Deep link generado**: Si todo est√° correcto, generaremos el enlace para Radix Wallet
4. üîê **Firma en wallet**: Podr√°s revisar y firmar la transacci√≥n de forma segura

## üí° Beneficios de las Validaciones:

- **Evita errores**: Detectamos direcciones inv√°lidas antes de procesar
- **Verifica fondos**: Comprobamos que tengas balance suficiente
- **Ahorra tiempo**: Identificamos problemas sin abrir la wallet
- **Mayor seguridad**: Validaciones adicionales antes de firmar

## üì± Generar C√≥digo QR (Paso Recomendado)

Una vez que tengas tu deep link de transferencia XRD, **recomendamos encarecidamente** convertirlo a c√≥digo QR local para una experiencia optimizada en Claude Desktop:

### üéØ **Opci√≥n Recomendada**: \`deeplink_to_qr_local\` (NUEVO)

**‚ú® Caracter√≠sticas Premium**:
- üñºÔ∏è **Compatible con Claude Desktop**: Archivos PNG renderizables como artefactos sin problemas
- üì± **Calidad optimizada**: 512px por defecto, ideal para escaneado m√≥vil confiable
- üíæ **Archivos persistentes**: Guardado en \`qrimages/\` para reutilizaci√≥n y compartir
- üîÑ **Gesti√≥n inteligente**: Nombres √∫nicos evitan duplicados, limpieza autom√°tica
- ‚ö° **Performance superior**: <300ms generaci√≥n, <50KB archivos, error correction nivel H

**üí° Casos de uso ideales**:
- üì≤ **Claude Desktop**: Renderizar QR como artefactos sin p√©rdida de contexto
- üíº **Uso profesional**: Archivos PNG de alta calidad para documentaci√≥n
- üîÑ **Reutilizaci√≥n**: Archivos guardados para referencia futura
- üì§ **Compartir f√°cil**: Enviar archivos PNG directamente a otros dispositivos

### üîß **Opci√≥n Alternativa**: \`deeplink_to_qr\` (Cl√°sica)

**üìä Caracter√≠sticas Base64**:
- üìÑ **Formato cl√°sico**: SVG escalable y PNG Base64 para integraci√≥n web
- üñ•Ô∏è **Aplicaciones web**: Datos embebidos como \`data:image/png;base64,<c√≥digo>\`
- üìã **M√∫ltiples formatos**: SVG + PNG simult√°neamente
- üíª **Entornos no-Desktop**: Para uso fuera de Claude Desktop

**üìã Workflow Recomendado**:
1. üî® **Generar transacci√≥n**: Usa \`xrd_transaccion\` para crear tu deep link
2. ‚≠ê **Crear QR local**: Usa \`deeplink_to_qr_local\` para archivo PNG optimizado
3. üì± **¬°Escanear y usar!**: El archivo PNG es compatible con cualquier lector QR m√≥vil

**üéØ ¬øPor qu√© \`deeplink_to_qr_local\`?**
- ‚úÖ **Sin problemas de renderizado** en Claude Desktop (resuelve limitaciones Base64)
- ‚úÖ **Mayor calidad visual** para escaneado m√≥vil
- ‚úÖ **Persistencia de archivos** para uso posterior
- ‚úÖ **Optimizado para transacciones Radix** con configuraci√≥n espec√≠fica

¬øTienes todos los datos listos? ¬°Proporci√≥nalos y crearemos tu transferencia XRD con validaciones autom√°ticas! Y si quieres, despu√©s podr√°s generar c√≥digos QR para facilitar el uso.`
                }
            }
        ]
    };
});
async function main() {
    const transport = new StdioServerTransport();
    await server.connect(transport);
    console.error("Simple MCP Server running on stdio");
}
main().catch((error) => {
    console.error("Error:", error);
    process.exit(1);
});
